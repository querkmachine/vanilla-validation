{"version":3,"file":"validate.min.js","sources":["src/index.js"],"sourcesContent":["class Validate {\n  constructor($form, options = {}) {\n    // If the form has the `novalidate` attribute, quit out\n    if ($form.noValidate) {\n      return;\n    }\n    // Create settings object\n    this.settings = Object.assign(\n      {},\n      {\n        showInlineErrors: true,\n        showErrorSummary: true,\n        disableButtonsOnSubmit: true,\n        submitButtonSelector: '[type=\"submit\"], [type=\"image\"]',\n        errorSummaryClass: \"error-message-summary\",\n        inlineErrorClass: \"error-message\",\n        inputsDeferToFieldsets: [], // array of input IDs\n        i18n: {\n          valRequired: \"This field is required.\",\n          valType: \"Value doesn't match expected type.\",\n          valTypeColor:\n            \"Value should be a valid hexidecimal code (for example, #786999).\",\n          valTypeEmail:\n            \"Value should be a valid email address (for example, hello@example.com).\",\n          valTypeNumber: \"Value should be a valid number.\",\n          valTypeTel: \"Value should be a valid telephone number.\",\n          valTypeURL:\n            \"Value should be a valid web address, including the protocol (for example, https://example.com).\",\n          valPattern: \"Value doesn't match expected format.\",\n          valMaxlength:\n            \"Value cannot be longer than {1} characters. Currently it's {2} characters.\",\n          valMinlength:\n            \"Value cannot be shorter than {1} characters. Currently it's {2} characters.\",\n          valMax: \"Value must be {1} or less.\",\n          valMin: \"Value must be {1} or more.\",\n          valStep: \"Value must be a multiple of {1}.\",\n        },\n      },\n      options\n    );\n    // Gather some elements\n    this.$form = $form;\n    this.$submitButtons = [\n      ...$form.querySelectorAll(this.settings.submitButtonSelector),\n    ];\n    // Track form state\n    this.clickedSubmitButton = null;\n    this.errorList = [];\n    // Go\n    this.create();\n  }\n  create() {\n    // Add `novalidate` to form\n    this.$form.setAttribute(\"novalidate\", \"novalidate\");\n    // Bind events\n    this.$form.bindFormSubmit = this.onSubmit.bind(this);\n    this.$form.bindSubmitClick = this.onClickSubmit.bind(this);\n    this.$form.addEventListener(\"submit\", this.$form.bindFormSubmit);\n    this.$submitButtons.forEach(($button) => {\n      $button.addEventListener(\"click\", this.$form.bindSubmitClick);\n    });\n  }\n  destroy() {\n    this.clearErrors();\n    // Remove attributes\n    this.$form.removeAttribute(\"novalidate\");\n    // Remove listeners\n    this.$form.removeEventListener(\"submit\", this.$form.bindFormSubmit);\n    this.$submitButtons.forEach(($button) => {\n      $button.removeEventListener(\"click\", this.$form.bindSubmitClick);\n    });\n  }\n  onSubmit(e) {\n    e.preventDefault();\n    this.errorList = this.findErrors();\n    // If submit button clicked includes `formnovalidate`\n    // Or there were no errors found\n    // Submit the form\n    if(\n      this.clickedSubmitButton.formNoValidate ||\n      this.errorList.length === 0\n    ) {\n      this.submitForm();\n    }\n    // Otherwise, print the list of errors\n    else {\n      this.printErrors();\n    }\n  }\n  onClickSubmit(e) {\n    // Track which button was clicked\n    this.clickedSubmitButton = e.currentTarget;\n  }\n  findErrors() {\n    // Clear existing errors\n    this.clearErrors();\n    // Grab all the inputs and loop over them, gathering info on the ones that report invalid.\n    const $inputs = [...this.$form.querySelectorAll(\"input, textarea, select\")];\n    $inputs.forEach(($input) => {\n      if (!$input.validity.valid) {\n        this.errorList.push({\n          $element: $input,\n          $fieldset: this.shouldInputDeferToFieldset($input)\n            ? $input.closest(\"fieldset\")\n            : null,\n          id: $input.id,\n          name: $input.name,\n          label: this.getInputLabel($input),\n          errorMessage: this.getInputErrorMessage($input),\n        });\n      }\n    });\n    // Return error list\n    return this.errorList;\n  }\n  printErrors() {\n    // Mark invalid inputs\n    this.errorList.forEach((error) => {\n      error.$element.setAttribute(\"aria-invalid\", \"true\");\n    });\n    // Loop through and output inline errors\n    if (this.settings.showInlineErrors) {\n      this.errorList.forEach((error) => {\n        // Create error label\n        const $parentNode = error.$element.parentNode;\n        const errorId = `${error.id || error.name}-Error`;\n        const describedBy = [\n          error.$element.getAttribute(\"aria-describedby\") || null,\n          errorId,\n        ];\n        // If the error message already exists in the DOM, don't add it again\n        if (!document.getElementById(errorId)) {\n          const $errorLabel = document.createElement(\"div\");\n          $errorLabel.id = errorId;\n          $errorLabel.classList.add(this.settings.inlineErrorClass);\n          $errorLabel.innerText = error.errorMessage;\n          // If this input defers to fieldset (always true if $fieldset is populated)\n          // we want to place the error at the fieldset level\n          if (error.$fieldset) {\n            // There's no insertAfter function yet, so we have to get the next sibling then insert before it\n            const $fieldsetLegendSibling = error.$fieldset.querySelector(\n              \"legend\"\n            ).nextSibling;\n            error.$fieldset.insertBefore($errorLabel, $fieldsetLegendSibling);\n          } else {\n            $parentNode.insertBefore($errorLabel, error.$element);\n          }\n        }\n        // Associate it with the input\n        error.$element.setAttribute(\"aria-describedby\", describedBy.join(\" \"));\n      });\n    }\n    // Create error summary\n    if (this.settings.showErrorSummary) {\n      const displayedErrors = [];\n      const $summaryContainer = document.createElement(\"div\");\n      const $summaryList = document.createElement(\"ul\");\n      $summaryContainer.setAttribute(\"role\", \"alert\");\n      $summaryContainer.setAttribute(\"tabindex\", -1);\n      $summaryContainer.classList.add(this.settings.errorSummaryClass);\n      this.errorList.forEach((error) => {\n        // If this error hasn't already been rendered...\n        if (error.id && !displayedErrors.includes(error.id)) {\n          const $summaryItem = document.createElement(\"li\");\n          const $summaryItemLink = document.createElement(\"a\");\n          $summaryItemLink.href = `#${error.id}`;\n          $summaryItemLink.innerText = `${error.label}: ${error.errorMessage}`;\n          $summaryItem.appendChild($summaryItemLink);\n          $summaryList.appendChild($summaryItem);\n          displayedErrors.push(error.id);\n        }\n      });\n      $summaryContainer.appendChild($summaryList);\n      this.$form.prepend($summaryContainer);\n    }\n    // Move focus to error summary or first invalid input\n    if (this.settings.showErrorSummary) {\n      const $errorSummary = this.$form.querySelector(\n        `.${this.settings.errorSummaryClass}`\n      );\n      if ($errorSummary) {\n        $errorSummary.focus();\n      }\n    } else {\n      const $errorInputs = this.$form.querySelectorAll(\"[aria-invalid]\");\n      if ($errorInputs.length > 0) {\n        $errorInputs[0].focus();\n      }\n    }\n  }\n  clearErrors() {\n    // Remove aria-invalid and aria-describedby attributes from inputs\n    this.errorList.forEach((error) => {\n      const $input = error.$element;\n      $input.removeAttribute(\"aria-invalid\");\n      let describedBy = $input.getAttribute(\"aria-describedby\");\n      describedBy = describedBy.replace(`${error.id}-Error`, \"\").trim();\n      if (describedBy.length) {\n        $input.setAttribute(\"aria-describedby\", describedBy);\n      } else {\n        $input.removeAttribute(\"aria-describedby\");\n      }\n    });\n    // Get inline error elements and remove 'em all\n    if (this.settings.showInlineErrors) {\n      const $errorMessages = this.$form.getElementsByClassName(\n        this.settings.inlineErrorClass\n      );\n      [...$errorMessages].forEach(($error) => $error.remove());\n    }\n    // Remove error summary\n    if (this.settings.showErrorSummary) {\n      const $errorSummary = this.$form.querySelector(\n        `.${this.settings.errorSummaryClass}`\n      );\n      if ($errorSummary) {\n        $errorSummary.remove();\n      }\n    }\n    // Clear error list\n    this.errorList = [];\n  }\n  shouldInputDeferToFieldset($input) {\n    // Radio buttons live in groups, which SHOULD always be in fieldsets.\n    if ($input.type === \"radio\") {\n      return true;\n    }\n    // We can also configure certain inputs to defer to the fieldset in some instances (e.g. multi-part date inputs).\n    return this.settings.inputsDeferToFieldsets.includes($input.id);\n  }\n  getInputLabel($input) {\n    // If deferring to fieldset, we want to get the fieldset legend rather than the input's individual label.\n    if (this.shouldInputDeferToFieldset($input)) {\n      const legend = $input.closest(\"fieldset\")?.querySelector(\"legend\")\n        ?.innerText;\n      if (legend) {\n        return legend.trim();\n      }\n    }\n    // For everything else, just the input label should do.\n    if(!$input.labels.length) {\n      console.error(\"Form element doesn't have associated label.\", $input);\n      return \"\";\n    }\n    return $input.labels[0].innerText.trim();\n  }\n  getInputErrorMessage($input) {\n    // Default error message. This is also where any custom error messaging being rolled will be populated.\n    let errorMessage = $input.validationMessage;\n    // Required field is empty\n    if ($input.validity.valueMissing) {\n      errorMessage =\n        $input.dataset.valRequired || this.settings.i18n.valRequired;\n    }\n    // Type mismatch\n    else if ($input.validity.typeMismatch) {\n      if ($input.dataset.valType) {\n        errorMessage = this.formatErrorMessage(\n          $input.dataset.valType,\n          $input.type\n        );\n      } else {\n        switch ($input.type) {\n          case \"color\":\n            errorMessage = this.settings.i18n.valTypeColor;\n            break;\n          case \"date\":\n            errorMessage = this.settings.i18n.valTypeDate;\n            break;\n          case \"email\":\n            errorMessage = this.settings.i18n.valTypeEmail;\n            break;\n          case \"number\":\n            errorMessage = this.settings.i18n.valTypeNumber;\n            break;\n          case \"tel\":\n            errorMessage = this.settings.i18n.valTypeTel;\n            break;\n          case \"url\":\n            errorMessage = this.settings.i18n.valTypeURL;\n            break;\n          default:\n            errorMessage = this.formatErrorMessage(\n              this.settings.i18n.valType,\n              $input.type\n            );\n            break;\n        }\n      }\n    }\n    // Pattern mismatch\n    else if ($input.validity.patternMismatch) {\n      errorMessage = this.formatErrorMessage(\n        $input.dataset.valPattern || this.settings.i18n.valPattern,\n        $input.attributes.pattern.value\n      );\n    }\n    // Too long\n    else if ($input.validity.tooLong) {\n      errorMessage = this.formatErrorMessage(\n        $input.dataset.valMaxlength || this.settings.i18n.valMaxlength,\n        $input.attributes.maxlength.value,\n        $input.value.length\n      );\n    }\n    // Too short\n    else if ($input.validity.tooShort) {\n      errorMessage = this.formatErrorMessage(\n        $input.dataset.valMinlength || this.settings.i18n.valMinlength,\n        $input.attributes.minlength.value,\n        $input.value.length\n      );\n    }\n    // Range overflow\n    else if ($input.validity.rangeOverflow) {\n      errorMessage = this.formatErrorMessage(\n        $input.dataset.valMax || this.settings.i18n.valMax,\n        $input.attributes.max.value\n      );\n    }\n    // Range underflow\n    else if ($input.validity.rangeUnderflow) {\n      errorMessage = this.formatErrorMessage(\n        $input.dataset.valMin || this.settings.i18n.valMin,\n        $input.attributes.min.value\n      );\n    }\n    // Step mismatch\n    else if ($input.validity.stepMismatch) {\n      errorMessage = this.formatErrorMessage(\n        $input.dataset.valStep || this.settings.i18n.valStep,\n        $input.attributes.step.value\n      );\n    }\n    // Return error message\n    return errorMessage;\n  }\n  formatErrorMessage(string, ...subs) {\n    for (let i = 0; i < subs.length; i++) {\n      string = string.replace(`{${i + 1}}`, subs[i]);\n    }\n    return string;\n  }\n  submitForm() {\n    // Disable all the submit buttons to avoid double-dipping\n    if (this.settings.disableButtonsOnSubmit) {\n      this.$submitButtons.forEach(($button) => {\n        $button.disabled = true;\n        $button.setAttribute(\"aria-busy\", \"true\");\n      });\n    }\n    // Check to see if the submit button they clicked had anything important\n    if (this.clickedSubmitButton && this.clickedSubmitButton.name) {\n      // This button has a name, and potentially a value!\n      // The button has been disabled, which means it won't send the name\n      // value with the request anymore, but we don't wanna lose that info\n      // so let's make an input[type=\"hidden\"] to stash it in.\n      const $submitButtonData = document.createElement(\"input\");\n      $submitButtonData.type = \"hidden\";\n      $submitButtonData.name = this.clickedSubmitButton.name;\n      $submitButtonData.value = this.clickedSubmitButton.value;\n      this.$form.appendChild($submitButtonData);\n    }\n    // Resume submitting the form\n    this.$form.submit();\n  }\n}\n\nexport default Validate;"],"names":["constructor","$form","options","noValidate","settings","Object","assign","showInlineErrors","showErrorSummary","disableButtonsOnSubmit","submitButtonSelector","errorSummaryClass","inlineErrorClass","inputsDeferToFieldsets","i18n","valRequired","valType","valTypeColor","valTypeEmail","valTypeNumber","valTypeTel","valTypeURL","valPattern","valMaxlength","valMinlength","valMax","valMin","valStep","$submitButtons","querySelectorAll","this","clickedSubmitButton","errorList","create","setAttribute","bindFormSubmit","onSubmit","bind","bindSubmitClick","onClickSubmit","addEventListener","forEach","$button","destroy","clearErrors","removeAttribute","removeEventListener","e","preventDefault","findErrors","formNoValidate","length","submitForm","printErrors","currentTarget","$input","validity","valid","push","$element","$fieldset","shouldInputDeferToFieldset","closest","id","name","label","getInputLabel","errorMessage","getInputErrorMessage","error","$parentNode","parentNode","errorId","describedBy","getAttribute","document","getElementById","$errorLabel","createElement","classList","add","innerText","$fieldsetLegendSibling","querySelector","nextSibling","insertBefore","join","displayedErrors","$summaryContainer","$summaryList","includes","$summaryItem","$summaryItemLink","href","appendChild","prepend","$errorSummary","focus","$errorInputs","replace","trim","getElementsByClassName","$error","remove","type","legend","_$input$closest","_$input$closest$query","labels","console","validationMessage","valueMissing","dataset","typeMismatch","formatErrorMessage","valTypeDate","patternMismatch","attributes","pattern","value","tooLong","maxlength","tooShort","minlength","rangeOverflow","max","rangeUnderflow","min","stepMismatch","step","string","subs","i","disabled","$submitButtonData","submit"],"mappings":"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"}